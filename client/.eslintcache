[{"C:\\Users\\Owner\\insta\\client\\src\\index.js":"1","C:\\Users\\Owner\\insta\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Owner\\insta\\client\\src\\App.js":"3","C:\\Users\\Owner\\insta\\client\\src\\pages\\Home.js":"4","C:\\Users\\Owner\\insta\\client\\src\\pages\\Login.js":"5","C:\\Users\\Owner\\insta\\client\\src\\pages\\Signup.js":"6","C:\\Users\\Owner\\insta\\client\\src\\pages\\SingleThought.js":"7","C:\\Users\\Owner\\insta\\client\\src\\pages\\Profile.js":"8","C:\\Users\\Owner\\insta\\client\\src\\components\\Footer\\index.js":"9","C:\\Users\\Owner\\insta\\client\\src\\components\\Header\\index.js":"10","C:\\Users\\Owner\\insta\\client\\src\\utils\\queries.js":"11","C:\\Users\\Owner\\insta\\client\\src\\utils\\auth.js":"12","C:\\Users\\Owner\\insta\\client\\src\\utils\\mutations.js":"13","C:\\Users\\Owner\\insta\\client\\src\\components\\ThoughtForm\\index.js":"14","C:\\Users\\Owner\\insta\\client\\src\\components\\CommentList\\index.js":"15","C:\\Users\\Owner\\insta\\client\\src\\components\\ThoughtList\\index.js":"16","C:\\Users\\Owner\\insta\\client\\src\\components\\CommentForm\\index.js":"17","C:\\Users\\Owner\\insta\\client\\src\\components\\Tile\\index.js":"18","C:\\Users\\Owner\\insta\\client\\src\\components\\Like.js":"19"},{"size":543,"mtime":1643024996732,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1643024996735,"results":"22","hashOfConfig":"21"},{"size":2367,"mtime":1643024996711,"results":"23","hashOfConfig":"21"},{"size":1033,"mtime":1643024996734,"results":"24","hashOfConfig":"21"},{"size":4807,"mtime":1643024996734,"results":"25","hashOfConfig":"21"},{"size":4423,"mtime":1643024996735,"results":"26","hashOfConfig":"21"},{"size":1562,"mtime":1643275431228,"results":"27","hashOfConfig":"21"},{"size":1724,"mtime":1643024996734,"results":"28","hashOfConfig":"21"},{"size":891,"mtime":1643024996714,"results":"29","hashOfConfig":"21"},{"size":1570,"mtime":1643024996714,"results":"30","hashOfConfig":"21"},{"size":1429,"mtime":1643380083450,"results":"31","hashOfConfig":"21"},{"size":1043,"mtime":1643024996736,"results":"32","hashOfConfig":"21"},{"size":1958,"mtime":1643379901756,"results":"33","hashOfConfig":"21"},{"size":3067,"mtime":1643024996715,"results":"34","hashOfConfig":"21"},{"size":953,"mtime":1643024996713,"results":"35","hashOfConfig":"21"},{"size":517,"mtime":1643024996716,"results":"36","hashOfConfig":"21"},{"size":2397,"mtime":1643024996713,"results":"37","hashOfConfig":"21"},{"size":5147,"mtime":1643342465550,"results":"38","hashOfConfig":"21"},{"size":3183,"mtime":1643411610703,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"o3dn4m",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},"C:\\Users\\Owner\\insta\\client\\src\\index.js",[],["84","85"],"C:\\Users\\Owner\\insta\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Owner\\insta\\client\\src\\App.js",[],"C:\\Users\\Owner\\insta\\client\\src\\pages\\Home.js",[],"C:\\Users\\Owner\\insta\\client\\src\\pages\\Login.js",[],"C:\\Users\\Owner\\insta\\client\\src\\pages\\Signup.js",[],"C:\\Users\\Owner\\insta\\client\\src\\pages\\SingleThought.js",[],"C:\\Users\\Owner\\insta\\client\\src\\pages\\Profile.js",[],"C:\\Users\\Owner\\insta\\client\\src\\components\\Footer\\index.js",[],"C:\\Users\\Owner\\insta\\client\\src\\components\\Header\\index.js",[],"C:\\Users\\Owner\\insta\\client\\src\\utils\\queries.js",[],"C:\\Users\\Owner\\insta\\client\\src\\utils\\auth.js",[],"C:\\Users\\Owner\\insta\\client\\src\\utils\\mutations.js",["86","87"],"import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_THOUGHT = gql`\n  mutation addThought($thoughtText: String!) {\n    addThought(thoughtText: $thoughtText) {\n      _id\n      thoughtText\n      thoughtAuthor\n      createdAt\n      comments {\n        _id\n        commentText\n      }\n    }\n  }\n`;\n\nexport const ADD_COMMENT = gql`\n  mutation addComment($thoughtId: ID!, $commentText: String!) {\n    addComment(thoughtId: $thoughtId, commentText: $commentText) {\n      _id\n      thoughtText\n      thoughtAuthor\n      createdAt\n      comments {\n        _id\n        commentText\n        createdAt\n      }\n    }\n  }\n`;\n\nconst FOLLOW_USER = gql`\n  mutation($followingId: String!, $userId: String!) {\n    insert_Follow(\n      objects: [{ follower_id: $userId, following_id: $followingId }]\n    ) {\n      affected_rows\n    }\n  }\n`;\n\nconst UNFOLLOW_USER = gql`\n  mutation($followingId: String!, $userId: String!) {\n    delete_Follow(\n      where: {\n        follower_id: { _eq: $userId }\n        following_id: { _eq: $followingId }\n      }\n    ) {\n      affected_rows\n    }\n  }\n`;\n\nexport const ADD_LIKE = gql`\n  mutation addLike($postId: Int!, $userId: String!) {\n    insert_Like(objects: [{ \n      post_id: $postId, \n      user_id: $userId }]) {\n      affected_rows\n    }\n  }\n`;\n\nexport const REMOVE_LIKE = gql`\n  mutation($postId: Int!, $userId: String!) {\n    delete_Like(\n      where: { \n        user_id: { _eq: $userId },\n         post_id: { _eq: $postId } }\n    ) {\n      affected_rows\n    }\n  }\n`;","C:\\Users\\Owner\\insta\\client\\src\\components\\ThoughtForm\\index.js",["88"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_THOUGHT } from '../../utils/mutations';\nimport { QUERY_THOUGHTS, QUERY_ME } from '../../utils/queries';\n\nimport Auth from '../../utils/auth';\n\nconst ThoughtForm = () => {\n  const [thoughtText, setThoughtText] = useState('');\n\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addThought, { error }] = useMutation(ADD_THOUGHT, {\n    update(cache, { data: { addThought } }) {\n      try {\n        const { thoughts } = cache.readQuery({ query: QUERY_THOUGHTS });\n\n        cache.writeQuery({\n          query: QUERY_THOUGHTS,\n          data: { thoughts: [addThought, ...thoughts] },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n\n      // update me object's cache\n      const { me } = cache.readQuery({ query: QUERY_ME });\n      cache.writeQuery({\n        query: QUERY_ME,\n        data: { me: { ...me, thoughts: [...me.thoughts, addThought] } },\n      });\n    },\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addThought({\n        variables: {\n          thoughtText,\n          thoughtAuthor: Auth.getProfile().data.username,\n        },\n      });\n\n      setThoughtText('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'thoughtText' && value.length <= 280) {\n      setThoughtText(value);\n      setCharacterCount(value.length);\n    }\n  };\n\n  return (\n    <div>\n      <h3>What's on your techy mind?</h3>\n\n      {Auth.loggedIn() ? (\n        <>\n          <p\n            className={`m-0 ${characterCount === 280 || error ? 'text-danger' : ''\n              }`}\n          >\n            Character Count: {characterCount}/280\n          </p>\n          <form\n            className=\"flex-row justify-center justify-space-between-md align-center\"\n            onSubmit={handleFormSubmit}\n          >\n            <div className=\"col-12 col-lg-9\">\n              <textarea\n                name=\"thoughtText\"\n                placeholder=\"Here's a new thought...\"\n                value={thoughtText}\n                className=\"form-input w-100\"\n                style={{ lineHeight: '1.5', resize: 'vertical' }}\n                onChange={handleChange}\n              ></textarea>\n            </div>\n\n            <div className=\"col-12 col-lg-3\">\n              <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\n                Add Thought\n              </button>\n            </div>\n            {error && (\n              <div className=\"col-12 my-3 bg-danger text-white p-3\">\n                {error.message}\n              </div>\n            )}\n          </form>\n        </>\n      ) : (\n        <p>\n          You need to be logged in to share your thoughts. Please{' '}\n          <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default ThoughtForm;\n","C:\\Users\\Owner\\insta\\client\\src\\components\\CommentList\\index.js",[],"C:\\Users\\Owner\\insta\\client\\src\\components\\ThoughtList\\index.js",[],"C:\\Users\\Owner\\insta\\client\\src\\components\\CommentForm\\index.js",["89"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_COMMENT } from '../../utils/mutations';\n\nimport Auth from '../../utils/auth';\n\nconst CommentForm = ({ thoughtId }) => {\n  const [commentText, setCommentText] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addComment, { error }] = useMutation(ADD_COMMENT);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addComment({\n        variables: {\n          thoughtId,\n          commentText,\n          commentAuthor: Auth.getProfile().data.username,\n        },\n      });\n\n      setCommentText('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'commentText' && value.length <= 280) {\n      setCommentText(value);\n      setCharacterCount(value.length);\n    }\n  };\n\n  return (\n    <div>\n      <h4>What are your thoughts on this thought?</h4>\n\n      {Auth.loggedIn() ? (\n        <>\n          <p\n            className={`m-0 ${characterCount === 280 || error ? 'text-danger' : ''\n              }`}\n          >\n            Character Count: {characterCount}/280\n            {error && <span className=\"ml-2\">{error.message}</span>}\n          </p>\n          <form\n            className=\"flex-row justify-center justify-space-between-md align-center\"\n            onSubmit={handleFormSubmit}\n          >\n            <div className=\"col-12 col-lg-9\">\n              <textarea\n                name=\"commentText\"\n                placeholder=\"Add your comment...\"\n                value={commentText}\n                className=\"form-input w-100\"\n                style={{ lineHeight: '1.5', resize: 'vertical' }}\n                onChange={handleChange}\n              ></textarea>\n            </div>\n\n            <div className=\"col-12 col-lg-3\">\n              <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\n                Add Comment\n              </button>\n            </div>\n          </form>\n        </>\n      ) : (\n        <p>\n          You need to be logged in to share your thoughts. Please{' '}\n          <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default CommentForm;\n","C:\\Users\\Owner\\insta\\client\\src\\components\\Tile\\index.js",["90","91","92","93","94","95"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n// import { Auth } from '../utils/auth'\nimport Like from '../Like';\nimport CommentForm from '../CommentForm';\nimport millie from '../../images/millie.JPG'\nimport im2 from '../../images/im1.png'\nimport { Grid, Card, Icon, Button, Label, Image } from 'semantic-ui-react'\n\nfunction Tile({ \nthought, username,}) {\n    // //  const { user } = useutils(Auth)\n    //  function likePost() {\n    //      console.log('Like post!!');\n    //  }\n\n    //  function CommentForm() {\n    //      console.log('Comment on post!!');\n    //  }\n\n    return (\n\n        <Grid columns='equal'>\n            <Grid.Row columns={3}>\n                <Grid.Column>\n                    <Card key={thought._id}>\n                        <Card.Content>\n                            <Image className=\"ui avatar image\" src={millie} wrapped ui={false} />User Name\n                            {/* <Card.Header>Millie</Card.Header> */}\n                        </Card.Content>\n                        <Image src={im2} wrapped ui={false} />\n                        {/* <Card.Content> */}\n\n                        {/* <Card.Meta>\n                    <span className='date'>Joined in 2015</span>\n                </Card.Meta> */}\n\n                        {/* <Card.Description>\n                    {showUsername ? (\n                        <Link\n                            className=\"text-light\"\n                            to={`/profiles/${thought.thoughtAuthor}`}\n                        >\n                            {thought.thoughtAuthor} <br />\n                            <span style={{ fontSize: '1rem' }}>\n                                had this thought on {thought.createdAt}\n                            </span>\n                        </Link>\n                    ) : (\n                        <>\n                            <span style={{ fontSize: '1rem' }}>\n                                You had this thought on {thought.createdAt}\n                            </span>\n                        </>\n                    )}\n                </Card.Description> */}\n                        {/* </Card.Content> */}\n\n                        <Card.Content extra>\n                            <span className=\"right floated\">\n                                <a>\n                                    <Like  name='like' />4 Likes\n                                </a>\n                            </span>\n                            <a>\n                                <Link className=\"submit button\" to=\"/thoughts/:thoughtId\">\n                                    <CommentForm name='comment' />4 Comments\n                                </Link>\n\n                            </a>\n                        </Card.Content>\n                        {/* \n            <Card.Content extra>\n\n                <Input placeholder=\"Add Comment...\" />\n\n            </Card.Content> */}\n\n\n                    </Card >\n                </Grid.Column>\n\n\n            </Grid.Row>\n        </Grid >\n\n\n        // <div class=\"ui grid\">\n        //     <div class=\"three column row\">\n        //         <div class=\"column\">\n        //             <div className=\"ui card\" key={thought._id} >\n        //                 <div className=\"content\">\n        //                     <img className=\"ui avatar image\" src={millie}></img>Millie\n        //                 </div>\n        //                 <div className=\"image\">\n        //                     <img src={im2} alt=\"emily\"></img>\n        //                 </div>\n        //                 <div className=\"content\">\n        //                     <span className=\"right floated\">\n        //                         <Icon name='like' />4 Likes\n        //                     </span>\n        //                     <i className=\"comment icon\"></i>\n        //                     3 comments\n        //                 </div>\n        //                 <div className=\"extra content\">\n        //                     <div className=\"ui large transparent left icon input\">\n        //                         <i className=\"heart outline icon\"></i>\n        //                         <input type=\"text\" placeholder=\"Add Comment...\"></input>\n        //                     </div>\n        //                 </div>\n        //             </div>\n        //         </div>\n\n        //     </div>\n        // </div>\n    )\n}\n\nexport default Tile\n\n/* <div className=\"right floated meta\">\n                {showUsername ? (\n                    <Link\n                        className=\"text-light\"\n                        to={`/profiles/${thought.thoughtAuthor}`}\n                    >\n                        {thought.thoughtAuthor} <br />\n                        <span style={{ fontSize: '1rem' }}>\n                            had this thought on {thought.createdAt}\n                        </span>\n                    </Link>\n                ) : (\n                    <>\n                        <span style={{ fontSize: '1rem' }}>\n                            You had this thought on {thought.createdAt}\n                        </span>\n                    </>\n                )}\n            </div> */","C:\\Users\\Owner\\insta\\client\\src\\components\\Like.js",["96","97"],"import React, { useState, useRef } from \"react\";\r\n// import \"./index.css\";\r\n// import { gql } from \"apollo-boost\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\n// import { useAuth } from \"../utils/auth\";\r\nimport { Button, Label, Icon } from 'semantic-ui-react';\r\nimport { REMOVE_LIKE, ADD_LIKE } from \"../utils/mutations\";\r\nimport { QUERY_LIKES } from \"../utils/queries\"\r\n\r\n\r\n\r\n\r\n\r\nfunction Like(props) {\r\n  // const { isAuthenticated, user } = useAuth();\r\n\r\n  // stores if the currently logged in user has liked the post\r\n  const [liked, setLiked] = useState(false);\r\n  // stores the number of likes\r\n  const [countLikes, setCountLikes] = useState(-1);\r\n\r\n  // will store value of userId for the lifetime of component\r\n  const userId = useRef(null);\r\n\r\n  // if (isAuthenticated) {\r\n  //   userId.current = user.sub;\r\n  // } else {\r\n    userId.current = \"none\";\r\n  // }\r\n\r\n  // like post mutation\r\n  const [likePost] = useMutation(ADD_LIKE, {\r\n    variables: { postId: props.postId, userId: userId.current },\r\n    refetchQueries: [\r\n      {\r\n        query: QUERY_LIKES,\r\n        variables: { id: props.postId, userId: userId.current }\r\n      }\r\n    ]\r\n  });\r\n\r\n  // delete post mutation\r\n  const [deleteLike] = useMutation(REMOVE_LIKE, {\r\n    variables: { postId: props.postId, userId: userId.current },\r\n    refetchQueries: [\r\n      {\r\n        query: QUERY_LIKES,\r\n        variables: { id: props.postId, userId: userId.current }\r\n      }\r\n    ]\r\n  });\r\n\r\n  // fetch number of likes and array with like_id if user has already liked the post or an empty array\r\n  const { loading, error, data } = useQuery(QUERY_LIKES, {\r\n    variables: { id: props.postId, userId: userId.current }\r\n  });\r\n\r\n  // if above useQuery data is not loaded\r\n  if (loading) return \"Loading...\";\r\n  // if data fetch failed\r\n  if (error) return `Error! ${error.message}`;\r\n\r\n  // countLikes is used to ensure that it should only run for the first time\r\n  if (countLikes === -1) {\r\n    // if the user has already liked the post, we know that data has loaded now so we can reference data.Post\r\n    if (data.Post[0].Likes.length > 0) {\r\n      setLiked(true);\r\n    }\r\n\r\n    // store value of number of likes in state, we are putting check conditions to prevent infinite loops\r\n    setCountLikes(data.Post[0].Likes_aggregate.aggregate.count);\r\n  }\r\n\r\n  return (\r\n    <div className=\"post-like-container\">\r\n      {/* isAuthenticated && */ (\r\n        <>\r\n          {!liked && (\r\n            <Button\r\n              className=\"post-like-button-white button-nodec\"\r\n              onClick={() => {\r\n                likePost();\r\n                setLiked(true);\r\n                setCountLikes(countLikes + 1);\r\n              }}\r\n            />\r\n          )}\r\n          {liked && (\r\n            <Button\r\n              className=\"post-like-button-black button-nodec\"\r\n              onClick={() => {\r\n                deleteLike();\r\n                setLiked(false);\r\n                setCountLikes(countLikes - 1);\r\n              }}\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n      {countLikes ? <span className=\"Post-likes\">{countLikes} likes</span> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Like;\r\n",{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":58,"column":7,"nodeType":"104","messageId":"105","endLine":58,"endColumn":18},{"ruleId":"102","severity":1,"message":"106","line":68,"column":7,"nodeType":"104","messageId":"105","endLine":68,"endColumn":20},{"ruleId":"102","severity":1,"message":"107","line":41,"column":15,"nodeType":"104","messageId":"105","endLine":41,"endColumn":19},{"ruleId":"102","severity":1,"message":"107","line":19,"column":15,"nodeType":"104","messageId":"105","endLine":19,"endColumn":19},{"ruleId":"102","severity":1,"message":"108","line":1,"column":17,"nodeType":"104","messageId":"105","endLine":1,"endColumn":25},{"ruleId":"102","severity":1,"message":"109","line":8,"column":22,"nodeType":"104","messageId":"105","endLine":8,"endColumn":26},{"ruleId":"102","severity":1,"message":"110","line":8,"column":28,"nodeType":"104","messageId":"105","endLine":8,"endColumn":34},{"ruleId":"102","severity":1,"message":"111","line":8,"column":36,"nodeType":"104","messageId":"105","endLine":8,"endColumn":41},{"ruleId":"112","severity":1,"message":"113","line":61,"column":33,"nodeType":"114","endLine":61,"endColumn":36},{"ruleId":"112","severity":1,"message":"113","line":65,"column":29,"nodeType":"114","endLine":65,"endColumn":32},{"ruleId":"102","severity":1,"message":"111","line":6,"column":18,"nodeType":"104","messageId":"105","endLine":6,"endColumn":23},{"ruleId":"102","severity":1,"message":"109","line":6,"column":25,"nodeType":"104","messageId":"105","endLine":6,"endColumn":29},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'FOLLOW_USER' is assigned a value but never used.","Identifier","unusedVar","'UNFOLLOW_USER' is assigned a value but never used.","'data' is assigned a value but never used.","'useState' is defined but never used.","'Icon' is defined but never used.","'Button' is defined but never used.","'Label' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]